# 완전 이진트리


def inorder(n, N): # 1번부터 중위순회
    if n <= N:
        inorder(2*n, N) # 좌
        print(tree[n], end='')
        inorder(2*n+1, N) # 우



t = 10
for tc in range(1, t+1):
    n = int(input())
    tree = [0] * (n+1)
    for _ in range(n):
        arr = list(input().split())
        tree[int(arr[0])] = arr[1]
        # [0, 'W', 'F', 'R', 'O', 'T', 'A', 'E', 'S']

    print(f'#{tc}', end=' ')
    inorder(1, n)
    print()























'''
    if n <= last:    #정점이 last이내이면,
        in_order(n*2, last)    #곱했더니, 이미 없는번호인데? 라스트정점을 넘어갔는데? 그러면 다음줄 넘어감.
        print(tree[n], end = '')    #tree에 뭔가가 저장되어있겠지_tree의 n에서 처리할 일
        in_order(n*2+1, last)   #이 방식은 포화이진트리에 한정해아함
                                #만약 포화이진트리를 따르는데, 중간에 2가 빠져있어서
                                #이런상황이면 이것 사용할 수 없음. 중간에 빠진 수 체크하는 배열을 하나 더 만들던가 해야함
"""
                                        1
                                    2           3
                                4      5      6   7
                            8               12
"""
# last = N    #포화이진트리에서는 라스트 정점이 주어짐(총 8개의 정점이다 --그럼 라스트가 8)
# tree = []       #tree에 뭔가가 저장되어있겠지
 
 
T = 10
 
for tc in range(1, T+1):
    N = int(input())    #정점의 개수이자 마지막 정점 번호
    #정점의 개수만큼 인덱스로 사용할 수 있게 확보해둠
    tree = [0] * (N+1)  #완전이진트리 전제가 있으므로
    #이것에 대한 정보가 들어옴. 읽어야. (길이가 제각각. 앞에 4글자 들어오는 것고 있고, 2글자만 들어오는 것이 있고.. 3글자도)
    #일단 리스트로 받기
    for _ in range(N):
        arr = list(input().split()) #글자정보만 있으면 되므로.
 
        tree[int(arr[0])] = arr[1]  #적어도 번호, 내용물 2개는 들어오므로 (정점번호와 글자)
 
    # print(tree)
 
    #1번부터 중위순회
    print(f'#{tc}', end = ' ')
    in_order(1, N)
    print()
 
    """
    이렇게 저장을 해두고 중위순회를 하면됨. 루트가 1번이므로 1번부터 중위순회!
    #1번부터 중위순회
    #1번으로 가서, 왼쪽자식으로 갈거면 1*2, 오른쪽자식으로 가면 1*2+1 (현재번호*2+1) 중위순회이므로 그 사이에 출력하는 것을 하면됨!
[0, 'W', 'F', 'R', 'O', 'T', 'A', 'E', 'S']
[0, '_', '_', 'I', 'U', 'E', '_', 'R', 'M', 'E', 'C', 'C', 'N', 'N', 'E', 'N', 'O', 'P', 'T', 'R', 'S', 'I', 'N', 'E', 'A', 'D', 'E', 'G', 'N', 'E', 'I', 'G', 'C']
[0, '_', 'L', 'A', 'R', 'I', '_', 'R', 'W', '_', 'O', 'H', 'N', 'A', 'S', 'C', 'O', 'A', 'E', 'A', 'G', 'R', 'T', 'M', 'A', 'D', 'D', 'T', '_', 'T', 'U', 'T', 'S', 'F']
[0, 'A', 'R', 'T', 'I', '_', 'F', 'A', 'T', '_', 'A', 'R', 'H', 'R', 'S', 'C', 'E', '_', 'S', 'E', 'H', 'D', 'B', 'E', 'T', '_', 'I', 'S', '_', 'E', 'R', 'H', 'D', 'P', 'H', 'F', 'R', 'T', 'S', 'A', 'C', '_', 'N']
[0, '_', 'L', '_', '_', 'I', 'B', 'V', 'C', '_', 'O', 'H', 'R', 'E', 'O', 'N', 'E', 'M', 'O', 'A', 'G', 'R', 'T', 'M', 'P', 'O', 'L', 'M', 'S', 'L', 'I', 'G', 'W', 'L', 'O', 'E', 'T']
[0, 'Q', 'G', 'E', 'T', 'A', 'E', 'R', 'A', 'I', 'S', 'K', 'E', 'T', '_', 'P', 'R', '_', 'R', 'N', '_', 'T', 'C', '_', 'U', 'U', '_', 'R', 'E', 'G', 'A', 'H', 'A', 'R', 'Y', 'S']
[0, 'S', 'V', 'H', 'W', 'E', 'C', 'H', 'W', 'D', 'H', 'L', 'R', '_', '_', 'L', 'E', 'O', 'U', 'H', '_', '_', 'N', 'M', '_', 'A', 'K', 'T', 'E', 'S', 'E', 'L', 'H', '_', 'H', '_', 'O', 'L', '_', 'A', 'E', 'T', 'E', 'K', 'R', 'E', '_', 'U', 'T', 'C']
[0, 'E', 'N', 'T', 'R', 'S', 'E', 'M', '_', 'S', '_', 'T', 'P', 'E', 'M', 'N', 'H', 'P', 'E', 'E', 'T', 'I', '_', 'H', '_', 'R', 'S', 'N', '_', 'O', 'E', 'T', 'T', 'E']
[0, 'P', 'E', 'E', 'R', 'D', '_', 'R', 'O', 'P', 'O', 'R', 'S', 'R', '_', 'C', 'N', 'D', '_', 'R', '_', 'R', 'E', '_', 'O', 'T', 'O', 'D', 'R', 'T', 'A', 'E', 'I', '_', 'R', 'E']
[0, 'N', 'O', 'T', 'H', 'T', '_', 'T', 'E', 'O', 'Y', 'A', 'N', 'N', 'T', 'E', 'T', 'C', 'N', 'L', 'G', '_', 'R', 'I', 'I', 'G', 'I', 'S', 'I', 'U']
 
    """

'''