'''
<순차 검색>
일렬로 되어 있는 자료를 순서대로 검색하는 방법
- 가장 간단하고 직관적인 검색 방법
- 배열이나 연결 리스트 등 순차구조로 구현된 자료구조에서 원하는 항목을 찾을 때 유용
- 알고리즘이 단순하여 구현이 쉽지만, 검색 대상의 수가 많을 경우 수행시간이 급격히 증가하여 비효율적임

# 2가지 경우
1. 정렬되어 있지 않은 경우
2. 정렬되어 있는 경우

**1. 정렬되어 있지 않은 경우**

 *검색과정*
 1. 첫 번째 원소부터 순서대로 검색 대상과 키 값이 같은 원소가 있는지 비교하며 찾는다.
 2. 키 값이 동일한 원소를 찾으면 그 원소의 인덱스를 반환한다.
 3. 자료구조의 마지막에 이를 때까지 검색 대상을 찾지 못하면 검색 실패

**슈도코드**
def sequentialSearch(a, n, key)
    i <-0
    while i < n and a[i] != key:    # i < n -> 유효한 idx and a[i]!= key -> 배열의 내용
        i <- i+1 = 1                # 반드시 idx 검사를 먼저 해야함!! 아니면 idxError

    if i<n :
        return i # 찾으면 검색 중단
    else:
        return -1 # 실패한 경우


**2. 정렬되어 있는 경우**

*검색과정*
- 자료가 오름차순으로 정렬된 상태에서의 검색
- 자료를 순차적으로 검색하면서 키 값을 비교하여, 원소의 키 값이 검색 대상의 키 값보다 크면
찾는 원소가 없다는 것이므로 검색을 종료

**시간복잡도**
O(n)
- 찾고자 하는 원소의 순서에 따라 비교회수가 결정됨
- 정렬이 되어있으므로, 검색 실패를 반환하는 경우 평균 비교회수가 반으로 줄어든다

**슈도코드**
def sequentialSearch(a, n, key)
    i <-0
    while i<n and a[i]<key:
        i <- i +1
    if i<n and a[i] = key:
        return i
    else:
        return -1

def sequentialSearch(a, n, key)
    i = 0
    for i in range(n):
        i += 1
    if









'''