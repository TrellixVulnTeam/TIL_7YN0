# 02. CSS & Bootstrap

## 1. CSS Layout

> CSS page layout techniques

- Display
- Position
- Float
- Flexbox
- GridSystem



### 2.1 Float

> 이미지 좌, 우측 주변으로 텍스트를 둘러싸는 레이아웃을 위해 도입
>
> 더 나아가 이미지가 아닌 다른 요소들에도 적용해 웹 사이트의 전체 레이아웃을 만드는데까지 발전

#### 2.1.1 속성

- none : 기본값
- left : 요소를 왼쪽으로 띄움
- right : 요소를 오른쪽으로 띄움

#### 2.1.2 Float Clear

> float로 인하여 레이아웃을 망가지지 않게 하는 방법!

`::after`

- 선택한 요소의 맨 마지막 자식으로 가상 요소를 하나 생성 
- 보통 content 속성과 함께 짝지어, 요소에 장식용 콘텐츠를 추가할 때 사용
- 기본값은 inline

`clear`

- 선행 floating 요소 다음일 수 있는지 또는 그 아래로 내려가(해제되어(cleared))야 하는지를 지정. 
- clear 속성은 부동 및 비부동 요소 모두에 적용된다. 

```css
.clearfix::after{
    content: "";
    display: block;
    clear: both;
}
```



#### 2.1.2 Float 정리

- flexbox 및 그리드 레이아웃과 같은 기술이 나오기 이전에 Float는 열 레이아웃을 만드는데 사용됨
- flexbox와 grid의 출현과 함께 결국 원래 텍스트 블록 내에서 float 이미지를 위한 역할로 돌아감
- 웹에서는 여전히 사용하는 경우도 있다 (ex. naver nav bar)



### 2. Flexbox 

> CSS Flexible Box Layout

- 요소 간 **공간 배분**과 **정렬** 기능을 위한 1차원(단방향) 레이아웃 
- 크게 딱 2가지만 기억하자!!!!!! **요소** 와 **축**!!
  - 요소
    - Flex Container (부모 요소)
    - Flex Item (자식 요소)
  - 축 
    - main axis (메인축)
    - cross axis (교차축)





#### 2.2.1 Flexbox의 구성 요소

- Flex Container (부모 요소)
  - flexbox 레이아웃을 형성하는 가장 기본적인 모델
  - Flex Item들이 놓여있는 영역
  - display 속성을 flex 혹은 inline-flex로 지정
- Flex Item (자식 요소)
  - 컨테이너의 컨텐츠 

> 정렬을 감싸고 있는 flex container 인 부모 요소에 `display: flex;` 혹은 `inline-flex`를 주고 부모를 control!!



#### 2.2.2 Flex에 적용하는 속성

- 배치방향 설정 
  - `flex- direction`
- 메인축 방향 정렬
  - `justify - content`
- 교차축 방향 정렬
  - `align-itmes`, `align-self`, `align-content`
- 기타
  - flex - wrap, flex-flow, flex-grow, order
    - order : 값이 작을수록 앞으로 정렬
    - flex-grow : 메인축에서 남은 공간을 각 항목에게 분배 

> content & itmes & self

- content : 여러줄 정렬
- items : 한 줄 정렬
- self : flex-item 개별요소 정렬

ex .  justify-content : 메인축 기준 여러 줄 정렬

align -items : 교차축 기준 한 줄 정렬

align-self : 교차축 기준 선택한 요소 하나 정렬 



##### 2.2.2.1 Flex 컨테이너에 적용하는 속성

##### 	1. `dislplay: flex;`  

> flex 컨데이너를 만들기 위한 시작 

​	`display: inline-flex;` : 컨테이너가 주변 요소들과 어떻게 어우러질지 결정

​												밖의 block 들이 요소에 맞게 줄어듬. 

```css
.container {
    display: flex;
    /* display: inline-flex;*/
}
```



##### 2. `flex - direction` 

> 배치 방향 설정 (가로 - row, 세로 - column)

- row : 아이템들이 행(가로) 방향으로 배치
- row-reverse : 아이템들이 역순으로 가로 배치
- column : 아이템들이 열(세로) 방향으로 배치
- column-reverse : 아이템들이 역순으로 세로 배치

```css
.container {
	flex-direction: row;
	/* flex-direction: column; */
	/* flex-direction: row-reverse; */
	/* flex-direction: column-reverse; */
}
```

![image-20210815153805334](02.assets/image-20210815153805334.png)



##### 3. flex-wrap

> 컨테이너가 더이상 한 줄에 담을 여유 공간이 없을때, 아이템 줄바꿈을 어떻게 할지 결정
>
> wrap 하지 않으면, 그냥 삐져나간다.

- nowrap : 줄바꿈을 하지 않고 그냥 삐져나간다.
- wrap : 줄바꿈을 한다. flex나 inline-block으로 배치한 요소와 비슷하게 동작
- wrap-reverse : 줄바꿈하는데, 아이템을 역순으로 배치
- **flex-flow  : flex-direction +  flex-wrap의 shorthand**

```css
.container {
	flex-wrap: nowrap;  /*default*/
	/* flex-wrap: wrap; */
	/* flex-wrap: wrap-reverse; */
    flex-flow : column wrap;
}
```



##### 4. 메인축 방향 정렬 - `justify-content`

- flex-start : 아이템들을 시작점으로 정렬 (row -> 왼쪽, column -> 위)

- flex-end : 아이템들을 끝점으로 정렬 (row -> 오른쪽, column -> 아래)
- center: 아이템들을 가운데로 정렬
- space-between : 아이템들의 사이 'between' 에 균일한 간격
- space-around : 아이템들의 둘레'around'에 균일한 간격 (내부여백 = 외부여백 *2)
- space-evenly: 아이템들의 사이와 양 끝에 균일한 간격 

```css
.container {
	justify-content: flex-start;
	/* justify-content: flex-end; */
	/* justify-content: center; */
	/* justify-content: space-between; */
	/* justify-content: space-around; */
	/* justify-content: space-evenly; */
}
```

##### 5. 수직축 방향 정렬 : align-items

- stretch : 아이템들이 수직축 방향으로 끝까지 늘어남
- flex-start : 아이템들을 시작점으로 정렬 (row - 위, column - 왼쪽)
- flex-end : 아이템들을 끝으로 정렬 (row - 아래, column - 오른쪽)
- center : 아이템들을 가운데로 정렬
- baseline : 아이템들을 텍스트 베이스라인 기준으로 정렬 

```css
.container {
	align-items: stretch;
	/* align-items: flex-start; */
	/* align-items: flex-end; */
	/* align-items: center; */
	/* align-items: baseline; */
}
```



##### 6. 여러 행 정렬 : `align-content`

> flex-wrap: wrap;이 설정된 상태에서, 아이템들의 행이 2줄 이상 되었을 때의 수직축 방향 정렬을 결정하는 속성

```css
.container {
	flex-wrap: wrap;
	align-content: stretch;
	/* align-content: flex-start; */
	/* align-content: flex-end; */
	/* align-content: center; */
	/* align-content: space-between; */
	/* align-content: space-around; */
	/* align-content: space-evenly; */
}
```

#### 2.2.3 Flex 아이템에 적용하는 속성

##### 2.2.3.1. 수직축으로 아이템 정렬 : `align-self`

- auto
- flex-start
- flex-end
- center
- baseline
- stretch

```css
.item {
	align-self: auto;
	/* align-self: stretch; */
	/* align-self: flex-start; */
	/* align-self: flex-end; */
	/* align-self: center; */
	/* align-self: baseline; */
}
```



---

#### 2.2.4. 정리

- display : flex

  - 정렬하려는 부모 요소에 작성
  - inline-flex : flex영역을 블록으로 쓰지 않고 인라인 블록으로 사용

- flex-direction

  > item이 쌓이는 방향 설정

  - main-axis 가 변경됨
  - row(기본값) : 주축의 방향이 왼쪽에서 오른쪽
  - row-reverse : 주축의 방향이 오른쪽에서 왼쪽
  - column : 주축의 방향이 위에서 아래
  - column - reverse: 주축의 방향이 아래에서 위

- flex-wrap

  > 요소들이 강제로 한 줄에 배치되게 할 것인지 여부 설정

  - no-wrap : 모든 아이템들 한 줄에 나타내려고함 -> 자리가 없어도 튀어나옴!
  - wrap : 넘치면 그 다음줄로
  - wrap-reverse : 넘치면 그 윗줄로(역순)

- flex-flow

  > felx-direction과 flex-wrap의 shorthand

  - flex-direction과 flex-wrap에 대한 설정 값을 차례로 작성
    - ex. flex-flow: row wrap;

- justify-content

  > main축 정렬

  - flex-start (기본값) : 시작 시점부터 차례로 쌓임
  - flex-end : 쌓이는 시점이 뒤쪽부터 시작 (순서 역순 아닌 아이템이 뒤로 몰림)
  - center : 정 중 앙
  - space-between : 좌우 정렬
  - space-around : 균등 좌우 정렬 ( 내부 =  외부 *2)
  - space-evenly : 균등 정렬(내부=외부)

- align-items

  > cross축 정렬 (교차축)

  - stretch(기본값) : 컨테이너를 가득 채움
  - flex-start : 위
  - flex-end : 아래
  - center : 가운데
  - baseline : item내부의 text에 기준선을 맞춤 

- align-self

  > 개별 item에 적용하는 속성 (정렬 방식은 align-items와 동일, 적용되는 대상만 다름 
  - auto ( 기본값)
  - flex-start
  - flex-end
  - center
  - baseline
  - stretch: 부모 컨테이너에 자동으로 맞춰서 늘어남 

- order

  - 작은 숫자일수록 앞(우선 쌓이는 방향)으로 이동
  - 기본값 : 0

- flex-grow

  - 주축에서 남는 공간을 항목들에게 분배하는 방법
  - 각 아이템의 상대적 비율을 정하는 것은 아님
  - 기본값 : 0
  - 음수 불가능 



---

## 2. Bootstratp

### 2.1 spacing 

> (ex. mx - 3 , pb - 2)

- m - margin
- p - padding



- t - top
- b - bottom
- s - left
- e - right
- x - left, right
- y - top, bottom

| class name | rem  | px             |
| ---------- | ---- | -------------- |
| m-1        | 0.25 | 4              |
| m-2        | 0.5  | 8              |
| m-3        | 1    | 16 (html root) |
| m-4        | 1.5  | 24             |
| m-5        | 3    | 48             |



### 2.2 Responsive Web Design

- 다양한 화면 크기를 가진 디바이스들이 등장함에 따라 responsive web design 개념이 등장
- 반응형 웹은 별도의 기술 이름이 아닌 웹 디자인에 대한 접근 방식, 반응형 레이아웃 작성에 도움이 되는 사레들의 모음 등을 기술하는데 사용되는 언어
  - ex. Media Queries, Flexbox, Bootstrap Grid System, The viewport meta tag



### 2.3 Grid System

- Bootstrap Grid system은 flexbox로 제작됨
- container, rows, column으로 컨텐츠를 배치하고 정렬 ( ex .rows -> 12개를 가지겠다!, column -> 12개중 n 개를 가지겠다)
- 반드시 기억해야 할 것 2가지!!!
  - 12개의 column
  - 6개의 grid breakpoints

#### 2.3.1 Grid system class

- row
  - columns의 wrapper
- gutters
  - grid 시스템에서 반응적으로 공간을 확보하고 컨텐츠를 정렬하는 데 사용되는 column 사이의 padding
- col, col-*
  - column class는 row 당 가능한 12개 중 사용하려는 columns 수를 나타냄
  - columns 너비는 백분율로 설정 되므로 항상 부모 요소를 기준으로 유동적으로 크기가 조정됨
  - grid layout에서 내용은 반드시 columns안에 있어야 하며 오직 columns만 row의 바로 하위 자식일 수 있음
- offset
  - 지정한 만큼의 column 공간을 무시하고 다음 공간부터 컨텐츠를 적용
- Nesting(중첩)
  - row > col -* > row > col-* 의 방식으로 중첩 사용 가능 

#### 2.3.2 Grid breakpoints

- 다양한 디바이스에서 적용하기 위해 특정 px(픽셀) 조건에 대한 지점을 정해 두었는데 이를 breakpoints라고 함
- bootstrap은 대부분의 크기를 정의하기 위해 em 또는 rem 을 사용하지만 px는 grid breakpoint에 사용
  - viewport 너비가 픽셀 단위이고 글꼴 크기에 따라 변하지 않기 때문



## 3. 마무리

#### CSS Layout

- position
  - 문서 상에 요소를 배치하는 방법을 지정
- float
  - 한 요소(element)가 정상 흐름(normal flow)으로부터 빠져 텍스트 및 인라인(inline)요소가 그 주위를 감싸 요소의 좌, 우측을 따라 배치되어야 함을 지정
- flexbox
  - 아이템 간 공간 배분과 강력한 정렬 기능을 제공하기 위한 1차원 레이아웃 모델
- bootstrap grid system
  - 강력한 모바일 우선 Flexbox 그리드를 사용하여 모든 모양과 크기의 레이아웃을 구축
  - 12개의 열(col) 시스템, 6개의 반응형 계층 덕분에 가능!

#### 





